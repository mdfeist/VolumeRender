void main(float2  texCoord : TEXCOORD0,
	  uniform sampler2D frontTexData,
	  uniform sampler2D backTexData,
	  uniform sampler3D VolumeS,
	  uniform sampler1D TransferS,
	  uniform float stepSize,
	  out float4 color0 : COLOR0)
{	
	//color0 = tex1D(TransferS, texCoord.x);

	float3 front = tex2D(frontTexData, texCoord).xyz;
    float3 back = tex2D(backTexData, texCoord).xyz;
	float3 dir = normalize(back - front);
	float3 step = dir * stepSize;

	float3 pos = front;

	float4 dst = float4(0,0,0,0);
	float4 src = 0;

	float4 value = 0;

	// Light Direction
	float3 L = float3(0, 1, 1);
	
	for(int i = 0; i < 450; i++) // 450 default
	{
		value = tex3D(VolumeS, pos);

		if((value.a * 255.0f) >= 0.f)
		{	
			//index the transfer function with the iso-value (value.a)
			//and get the rgba value for the voxel
			src = tex1D(TransferS, value.a);

			if (src.a > 0.95f) {
				src.a *= .01f;

				//Oppacity correction: As sampling distance decreases we get more samples.
				//Therefore the alpha values set for a sampling distance of .5f will be too
				//high for a sampling distance of .25f (or conversely, too low for a sampling
				//distance of 1.0f). So we have to adjust the alpha accordingly.
				//src.a = 1 - pow((1 - src.a), .25f);

				//float s = dot(value.xyz, L);
			
				//diffuse shading
				//src.rgb = s * src.rgb;// + .1f * src.rgb;
			
				//Front to back blending
				// dst.rgb = dst.rgb + (1 - dst.a) * src.a * src.rgb
				// dst.a   = dst.a   + (1 - dst.a) * src.a		
				src.rgb *= src.a;
				dst = (1.0f - dst.a)*src + dst;
			
				//break from the loop when alpha gets high enough
				if(dst.a >= .95f)
					break;
			}
		}

		pos += step;

		if(pos.x > 1.0f || pos.y > 1.0f || pos.z > 1.0f) 
			break;
	}

	color0 = dst;
}	